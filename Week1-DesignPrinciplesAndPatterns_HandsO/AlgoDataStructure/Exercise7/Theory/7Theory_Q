QUESTION
	Scenario:

		You are developing a financial forecasting tool that predicts future values based on past data.
		Steps:

		1.	Understand Recursive Algorithms:
			a-	Explain the concept of recursion and how it can simplify certain problems.

		4.	Analysis:
			a-	Discuss the time complexity of your recursive algorithm.
			b-	Explain how to optimize the recursive solution to avoid excessive computation.



SOLUTION

    1.
        a) What is Recursion?
			Recursion is a programming technique where a method calls itself to solve a problem.

			It works by:
				Breaking a problem into smaller sub-problems.
				Solving the simplest version (base case) directly.
				Letting the function call itself with smaller inputs until the base case is reached.

			Why Use Recursion?
				It simplifies complex problems (like tree traversal, factorial, Fibonacci, etc.).
				Makes code cleaner for problems that naturally fit a divide-and-conquer approach.

	4.
        a) Time Complexity of the Recursive Algorithm

			Recursive Future Value Algorithm:

				FV(PV, r, n) = FV(PV * (1 + r), r, n - 1)

			The function is called once for each year.
			So, if n = 10, it runs 10 recursive calls.

			Time Complexity: O(n)
			Where n is the number of years (or periods).

    4.
        b. Optimization Techniques

			Even though this algorithm is simple and not computationally expensive, in general recursive functions can be inefficient (e.g., Fibonacci).

			Ways to Optimize Recursive Algorithms:

				Convert to Iteration:
					Use loops instead of recursion.
					Reduces function call overhead and avoids stack overflow.
					Example (Iterative Future Value):
						double futureValue = PV;
						for (int i = 0; i < years; i++) {
							futureValue *= (1 + rate);
						}

				Tail Recursion (in some languages):
					A special kind of recursion that can be optimized by compilers.
					Java doesn't optimize tail recursion automatically.