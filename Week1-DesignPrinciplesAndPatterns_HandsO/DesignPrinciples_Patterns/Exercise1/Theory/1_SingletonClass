QUESTION
	Scenario:
		You need to ensure that a logging utility class in your application has only one instance throughout the application lifecycle to ensure consistent logging.

		Steps:

		1.	Create a New Java Project:
			a-	Create a new Java project named SingletonPatternExample.
		2.	Define a Singleton Class:
			a-	Create a class named Logger that has a private static instance of itself.
			b-	Ensure the constructor of Logger is private.
			c-	Provide a public static method to get the instance of the Logger class.
		3.	Implement the Singleton Pattern:
			a-	Write code to ensure that the Logger class follows the Singleton design pattern.
		4.	Test the Singleton Implementation:
			a-	Create a test class to verify that only one instance of Logger is created and used across the application.



SOLUTION

	What is a Singleton class?

		- In Java, a singleton class is a class that allows only one instance of itself to be created.
		- This ensures that there is only one object of that class available throughout the application.
		- It provides a global point of access to this single instance.

	How is it typically Implemented?

		All steps to be done in the base class

		Static object/instance of the class:
			- Creating a dummy static object in the class itself

		Private Constructor:
			- (Not allowing user to create an instance with the default constructor)
			- Abc abc = new Abc(); --> default constructor
			- The constructor of the class is declared as private, preventing instantiation from outside the class.

		Static method named Instance:
			- (Directing the user to use that method ONLY to access the object)
			- A private static variable of the class type is declared to hold the single instance.
			- Returns the object created in the static object of the class

			EXAMPLE:

				public class{
					public static void main(String[] args){
						ABC obj1 = Abc.getInstance();
						ABC obj2 = Abc.getInstance();
					}
				}

				class Abc{
					//Static Object
					static Abc obj = new Abc();

					//Private Constructor
					private Abc(){   }

					//Static method "getInstance()"
					public static Abc getInstance(){
						return obj;
					}
				}


		Why needed? (USE CASE)

			Common Use Cases:
				- Logging: A single logging instance to manage logs from different parts of the application.
				- Configuration: A single configuration manager to handle application settings.
				- Database Connections: A single connection pool to manage database access.