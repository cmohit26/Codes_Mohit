QUESTION
	Scenario:
		You are developing a document management system that needs to create different types of documents (e.g., Word, PDF, Excel). Use the Factory Method Pattern to achieve this.

		Steps:

		1.	Create a New Java Project:
			a-	Create a new Java project named FactoryMethodPatternExample.

		2.	Define Document Classes:
			a-	Create interfaces or abstract classes for different document types such as WordDocument, PdfDocument, and ExcelDocument.
		3.	Create Concrete Document Classes:
			a-	Implement concrete classes for each document type that implements or extends the above interfaces or abstract classes.
		4.	Implement the Factory Method:
			a-	Create an abstract class DocumentFactory with a method createDocument().
			b-	Create concrete factory classes for each document type that extends DocumentFactory and implements the createDocument() method.
		5.	Test the Factory Method Implementation:
			a-	Create a test class to demonstrate the creation of different document types using the factory method.




SOLUTION

	What is a Concrete class in java?

		- A concrete class in Java is a class that can be instantiated, meaning objects of that class can be created.
		- It is a complete class, providing implementations for all its methods, including any inherited abstract methods.

		Here are some key characteristics of concrete classes:

			- Concrete classes can be instantiated using the new keyword.
			- They provide a complete implementation for all their methods, including those inherited
			- Does not contain any abstract methods.
			- Inheritance
			- Serve as the base for creating real-world objects.

	What is a Abstract class in java?

		An abstract class in Java is a class that cannot be instantiated directly.
		It is designed to be a base class for other classes, providing a common structure and behavior.

		Key Characteristics:
			- Declared with the abstract keyword
			- Contain abstract methods declared without an implementation, implemented by subclasses.
			- Contain concrete methods implementation that can be inherited by subclasses.
			- Cannot create an object of an abstract class directly using the new keyword.
			- Though they cannot be instantiated, constructors can be used by subclasses.


	What is a Abstract method in java?
		An abstract method in Java is a method declared without an implementation. It serves as a blueprint for subclasses, ensuring they provide their specific implementations.

		Here are key characteristics of abstract methods:
			- No Implementation, Abstract methods lack a body
			- Abstract methods must reside within an abstract class or an interface.
			- Subclasses of the abstract class are obligated to provide a concrete implementation for all abstract methods inherited from the superclass.

	What is an interface in java?
		An interface in Java is a blueprint of a class. It's a collection of abstract methods (methods without a body) and constants. Interfaces provide a way to achieve abstraction and multiple inheritance in Java.

		Here are some key characteristics of interfaces:
			Abstraction:
				Interfaces define a contract that classes must adhere to, specifying what methods a class must implement without dictating how they should be implemented.
			Multiple Inheritance:
				A class can implement multiple interfaces, allowing it to inherit behaviors from multiple sources. This is a workaround for Java not directly supporting multiple inheritance in classes.
			No Instantiation:
				Interfaces cannot be instantiated directly, meaning you cannot create objects of an interface type.
			Abstract Methods:
				Interfaces primarily contain abstract methods, which are declared without a body. Implementing classes must provide concrete implementations for these methods.
